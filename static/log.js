// Generated by LiveScript 1.5.0
(function(){
  "use strict";
  var $id, $q, after, every, timeIt, decompress, getTurn, setProgress, progressTimer, runProgressTimer, socket, retryEvery, retryCount, connect;
  $id = function(it){
    return document.getElementById(it);
  };
  $q = function(it){
    return document.querySelector(it);
  };
  after = function(ms, action){
    return setTimeout(action, ms);
  };
  every = function(ms, action){
    return setInterval(action, ms);
  };
  timeIt = function(title, action){
    console.time(title);
    try {
      return action();
    } finally {
      console.timeEnd(title);
    }
  };
  decompress = window.TextDecoder != null
    ? function(data){
      return new TextDecoder('utf-8').decode(pako.inflate(data));
    }
    : function(data){
      return pako.inflate(data, {
        to: 'string'
      });
    };
  getTurn = function(){
    var e;
    try {
      return +/\d+/.exec($q('#m_fight_log .block_h .block_title').textContent)[0];
    } catch (e$) {
      e = e$;
      return 0;
    }
  };
  setProgress = function(value){
    try {
      $q('#turn_pbar .p_bar div').style.width = value + "%";
    } catch (e$) {}
  };
  progressTimer = null;
  runProgressTimer = function(ago){
    var basePoint, that;
    basePoint = Date.now();
    if ((that = progressTimer) != null) {
      clearInterval(that);
    }
    setProgress(Math.min(ago *= 5, 100));
    progressTimer = every(250, function(){
      var progress;
      if ((progress = ago + (Date.now() - basePoint) * 5e-3) < 100 - 1e-5) {
        setProgress(progress);
      } else {
        setProgress(100);
        clearInterval(progressTimer);
        progressTimer = null;
      }
    });
  };
  socket = null;
  retryEvery = 3;
  retryCount = 0;
  connect = function(){
    var justConnected;
    socket = new WebSocket("" + (location.protocol === "https:" ? "wss" : "ws") + "://" + location.host + location.pathname + "/ws" + location.search + "");
    justConnected = true;
    socket.binaryType = 'arraybuffer';
    socket.onmessage = function(msg){
      var response, url, map, scrollValue;
      response = timeIt("Decompression", function(){
        return JSON.parse(decompress(msg.data));
      });
      if (response.stayHere) {
        retryEvery = response.retryEvery, retryCount = response.retryCount;
        socket.onclose = null;
        socket.close();
        after(response.retryAfter, connect);
      } else if ((url = response.redirect) != null) {
        if (--retryCount > 0) {
          socket.onclose = null;
          socket.close();
          after(retryEvery, connect);
        } else {
          location.replace(url);
        }
      } else if (response.turn > getTurn()) {
        console.timeEnd("New turn");
        retryCount = 0;
        $id('alls').outerHTML = response.allies;
        map = $id('map_wrap');
        scrollValue = map.scrollLeft / map.scrollWidth;
        $id('s_map').outerHTML = response.map;
        map = $id('map_wrap');
        map.scrollLeft = scrollValue * map.scrollWidth;
        $id('m_fight_log').outerHTML = response.log;
        runProgressTimer(justConnected ? response.ago : 0);
        console.time("New turn");
      }
      justConnected = false;
    };
    socket.onclose = function(){
      after(3000, connect);
    };
  };
  addEventListener('DOMContentLoaded', function(){
    runProgressTimer(updatedAgo);
    console.time("New turn");
    connect();
  });
}).call(this);
