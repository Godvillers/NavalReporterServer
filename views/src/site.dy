import vibe.vibe
import duel_log
import session_storage


final class Site
    private SessionStorage _storage

    void postSend(
        string clientVersion, string link, int turn, string allies, string map, string log
    )
        const dLog = duelLog(link, turn, allies, map, log)
        final switch (_storage.submit(dLog)) with (SubmissionStatus)
            case ignored: logDiagnostic("Ignoring duplicate %s", dLog.id); break
            case created: logInfo("Streaming %s", dLog.id); break
            case updated: break

        //TODO: Check browser extension version.
        render!("send.dt", dLog)

    void get()
        render!"index.dt"

    void getDuels()
        redirect("/")

    @path("/duels/log") \
    void getDuelsLogRoot()
        redirect("/")

    @path("/duels/log/:id") \
    void getDuelsLog(string _id)
        import core.time

        _storage.dropOldSessions(40.minutes)
        if (auto session = _id in _storage)
            const dLog = &session.dLog
            const ago = session.secondsSinceLastUpdated
            render!("log.dt", dLog, ago)
        else
            //The sailing has apparently ended, and there is no way to know
            //if it was hosted on godville.net or on godvillegame.com.
            redirect("https://godville.net/duels/log/" ~ _id)

    @path("/duels/log/:id/ws") \
    void getWS(string _id, scope WebSocket socket)
        import std.json

        auto response = JSONValue([
            "turn":   JSONValue(),
            "ago":    JSONValue(),
            "allies": JSONValue(),
            "map":    JSONValue(),
            "log":    JSONValue(),
        ])
        auto session = _id in _storage
        do
            if (_id !in _storage || session.finished)
                const host = session !is null ? session.dLog.host : "https://godville.net"
                response = JSONValue(["redirect": host ~ "/duels/log/" ~ _id])
                socket.send(response.toJSON())
                return

            auto dLog = &session.dLog
            response["turn"] = dLog.turn
            response["ago"] = session.secondsSinceLastUpdated
            response["allies"] = dLog.allies
            response["map"] = dLog.map
            response["log"] = dLog.log
            socket.send(response.toJSON())
            session.event.wait()
        while (socket.connected)
