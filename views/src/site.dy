import std.datetime
import vibe.vibe
import duel_log


private struct _Session
    DuelLog dLog
    SysTime lastUpdated
    ManualEvent event
    bool finished

    @property long secondsSinceLastUpdated() const
        return (Clock.currTime() - lastUpdated).total!"seconds"


private enum _SubmissionStatus: ubyte
    ignored,
    created,
    updated,


final class Site
    void postSend(
        string clientVersion, string link, int turn, string allies, string map, string log
    )
        const dLog = duelLog(link, turn, allies, map, log)
        final switch (_submitLog(dLog)) with (_SubmissionStatus)
            case ignored: logDiagnostic("Ignoring duplicate %s", dLog.id); break
            case created: logInfo("Streaming %s", dLog.id); break
            case updated: break

        //TODO: Check browser extension version.
        render!("send.dt", dLog)

    void get()
        render!"index.dt"

    void getDuels()
        redirect("/")

    @path("/duels/log") \
    void getDuelsLogRoot()
        redirect("/")

    @path("/duels/log/:id") \
    void getDuelsLog(string _id)
        _removeOldSessions()
        if (auto session = _id in _sessions)
            const dLog = &session.dLog
            const ago = session.secondsSinceLastUpdated
            render!("log.dt", dLog, ago)
        else
            //The sailing has apparently ended, and there is no way to know
            //if it was hosted on godville.net or on godvillegame.com.
            redirect("https://godville.net/duels/log/" ~ _id)

    @path("/duels/log/:id/ws") \
    void getWS(string _id, scope WebSocket socket)
        import std.json

        auto response = JSONValue([
            "turn":   JSONValue(),
            "ago":    JSONValue(),
            "allies": JSONValue(),
            "map":    JSONValue(),
            "log":    JSONValue(),
        ])
        auto session = _id in _sessions
        do
            if (_id !in _sessions || session.finished)
                const host = session !is null ? session.dLog.host : "https://godville.net"
                response = JSONValue(["redirect": host ~ "/duels/log/" ~ _id])
                socket.send(response.toJSON())
                return

            auto dLog = &session.dLog
            response["turn"] = dLog.turn
            response["ago"] = session.secondsSinceLastUpdated
            response["allies"] = dLog.allies
            response["map"] = dLog.map
            response["log"] = dLog.log
            socket.send(response.toJSON())
            session.event.wait()
        while (socket.connected)

    private:

    //TODO: Factor this out.
    _Session[string] _sessions

    _SubmissionStatus _submitLog(DuelLog dLog)
        if (auto session = dLog.id in _sessions)
            if (dLog.turn <= session.dLog.turn)
                return _SubmissionStatus.ignored
            dLog.process()
            session.dLog = dLog
            session.lastUpdated = Clock.currTime()
            session.event.emit()
            return _SubmissionStatus.updated

        dLog.process()
        _sessions[dLog.id] = _Session(dLog, Clock.currTime(), createManualEvent())
        return _SubmissionStatus.created

    void _removeOldSessions()
        if (_sessions.length)
            const now = Clock.currTime()
            foreach (ref session; _sessions)
                if (now - session.lastUpdated >= 40.minutes)
                    session.finished = true
                    session.event.emit()
                    _sessions.remove(session.dLog.id)
