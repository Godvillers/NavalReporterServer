import vibe.vibe


private /+immutable+/ string[2] _addresses = ["::1", "127.0.0.1"]
private ushort _port = 8000


private void _parseArguments()
    readOption("p|port", &_port, "Port to listen to (default: 8000).")


private void _configure() @safe
    import site

    setLogFormat(FileLogger.Format.threadTime, FileLogger.Format.threadTime)

    auto settings = new HTTPServerSettings
    settings.bindAddresses = _addresses[ ]
    settings.port = _port
    debug { }
    else
        settings.options &= ~HTTPServerOption.errorStackTraces

    listenHTTP(settings,
        (new URLRouter)
        .registerWebInterface(new Site)
        .get("/static/*", serveStaticFiles("."))
        .get("/favicon.ico", serveStaticFile("static/favicon.ico"))
        .get("/robots.txt", serveStaticFile("static/robots.txt"))
    )


int main()
    import std.encoding

    version (DigitalMars)
        import etc.linux.memoryerror

        static if (is(typeof(&registerMemoryErrorHandler)))
            registerMemoryErrorHandler()

    try
        _parseArguments()
        if (!finalizeCommandLineOptions())
            return 0//--help requested.
    catch (Throwable th)
        logFatal("Error processing command line: %s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 2

    try
        _configure()
    catch (Throwable th)
        logFatal("Configuration error: %s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 4

    try
        lowerPrivileges()
        return runEventLoop()
    catch (Throwable th)
        logFatal("%s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 1
