//This module takes a huge amount of time to build because of complex compile-time regexes,
//so it is placed in a subpackage to avoid recompilation whenever possible.
import std.array
import std.regex


@safe:

private Appender!(char[ ]) _buffer


static this() nothrow
    _buffer.reserve(150 << 10)


private string _replace(string pattern, alias replacer)(string text)
    debug
        static rx = regex(pattern, "x")
    else
        static rx = ctRegex!(pattern, "x")
    _buffer.clear()
    replaceAllInto!replacer(_buffer, text, rx)
    return _buffer.data.idup


struct DuelLog
    @safe:

    string host
    string id//\w{5,}
    int turn
    string allies, map, log//HTML.

    void process()
        import std.datetime
        import vibe.core.log

        const start = Clock.currTime()

        scope(success)
            const end = Clock.currTime()
            logDiagnostic("Processed %s in %s ms", id, (end - start).total!"msecs")

        allies = allies._replace!(r"
            ▼ (?=</div> [\s\S]*? >\( ([^<]*) \) (?:<a [^<>]*>➤</a>)? </span></div>)
        |   (?<=style=[^<>=]* width: \s*) (\d\w+)
        |   (?<=style=[^<>=]* font-size: \s*) \d\w+ (?=[^<>]*> \s* ([\d(]))
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        |   <a [^<>]* class=[^<>=]* \bpm_link\b [^<>]*>➤</a>
        |   (?<=>\s) \s+ (?=<)
        ", (c) {
            if (!c[1].empty)
                return `<a href="` ~ host ~ `/gods/` ~ c[1] ~ `" target="_blank">▶</a>`
            //TODO: Move this to the style sheet.
            if (!c[2].empty)
                return "175px"
            if (!c[3].empty)
                return c[3][0] == '(' ? "11px" : "12px"
            return ""
        })

        map = map._replace!(r"
            \. (499|500)\d*\b
        |   (-?\d\.\d*e-\d{2,})
        |   (?<=\d) \.000\d*\b
        |   (\.\d{3})\d+\b
        |   (?<=<title>) (Рулить[^<>]*) (?=</title>)
        |   <text [^<>]*> \s* </text>
        |   <line [^<]* </line>
        |   <div [^<>]* dir_resp [^<]* </div>
        |   \s? \bd_overlay\b
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        |   (?<=>\s) \s+ (?=<)
        ", (c) {
            if (!c[1].empty)
                return ".5"
            if (!c[2].empty)
                return "0"
            if (!c[3].empty)
                return c[3]
            if (!c[4].empty)
                return "(1 клетка)"
            return ""
        })

        //Show partially hidden text.
        log = log._replace!(r"
            (?<=\bd_line\b [^<>=]*) \s? style=[^<>]*
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        |   (?<=>\s) \s+ (?=<)
        ", c => "")


DuelLog duelLog(string link, int turn, string allies, string map, string log) pure
    import std.algorithm.searching
    import std.range
    import std.uri

    string host = "https://godville.net", id = "00000"
    const end = link.uriLength()
    if (end > 0)
        link = link[0 .. end - link[0 .. end].find('#').length]
        const firstSlash = link.length - link[8 .. $].find('/').length
        host = link[0 .. firstSlash]
        const lastSlash = firstSlash + link[firstSlash .. $].retro().find('/').retro().length
        id = link[lastSlash .. $]

    return DuelLog(host, id, turn, allies, map, log)
