//This module takes a huge amount of time to build because of complex compile-time regexes,
//so it is placed in a subpackage to avoid recompilation whenever possible.
import std.range
import std.regex


debug
    private enum _rx(string text) = regex(text, "x")
else
    private enum _rx(string text) = ctRegex!(text, "x")


struct DuelLog
    string host
    string id//\w{5,}
    int turn
    string allies, map, log//HTML.

    void process()
        allies = allies.replaceAll!((c) {
            if (!c[1].empty)
                return `<a href="` ~ host ~ `/gods/` ~ c[1] ~ `" target="_blank">▶</a>`
            return ""
        })(_rx!r"
            ▼ (?=</div> [\s\S]*? >\( ([^<]*) \) (?:<a [^<>]* >➤</a>)? </span></div>)
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        |   <a [^<>]* class=[^<>=]* \bpm_link\b [^<>]* >➤</a>
        ")

        map = map.replaceAll!((c) {
            if (!c[1].empty)
                return ".5"
            if (!c[2].empty)
                return "0"
            if (!c[3].empty)
                return c[3]
            if (!c[4].empty)
                return "(1 клетка)"
            return ""
        })(_rx!r"
            (\.499\d*)\b
        |   (-?\d\.\d*e-\d{2,})
        |   (\.\d{3})\d+\b
        |   (?<=<title>) (Рулить[^<>]*) (?=</title>)
        |   <text [^<>]*> \s* </text>
        |   <line [^<]* </line>
        |   <div [^<>]* dir_resp [^<]* </div>
        |   \s? \bd_overlay\b
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        ")

        //Show partially hidden text.
        log = log.replaceAll(_rx!r"
            (?<=\bd_line\b [^<>=]*) \s? style=[^<>]*
        |   <span [^<>]* class=[^<>=]* \b[lr]_slot\b [^<>]*> [\s\S]*? </span>\s*</span>
        ", "")


DuelLog duelLog(string link, int turn, string allies, string map, string log)
    import std.algorithm.searching
    import std.uri

    string host = "https://godville.net", id = "00000"
    const end = link.uriLength()
    if (end > 0)
        link = link[0 .. end - link[0 .. end].find('#').length]
        const firstSlash = link.length - link[8 .. $].find('/').length
        host = link[0 .. firstSlash]
        const lastSlash = firstSlash + link[firstSlash .. $].retro().find('/').retro().length
        id = link[lastSlash .. $]

    return DuelLog(host, id, turn, allies, map, log)
