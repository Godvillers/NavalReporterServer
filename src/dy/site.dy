import core.time

import vibe.vibe

import duel_snapshot.model
import ss = session_storage


@safe:

private enum _expirationPeriod = 40.minutes


final class Site
    @safe:

    private ss.SessionStorage _storage

    this(size_t maxMemory) nothrow pure
        _storage = ss.SessionStorage(maxMemory)

    private void _emitBasicCORSHeaders()
        header("Access-Control-Allow-Origin", "*")

    //vibe.d does not auto-generate an OPTIONS handler from a method name (?!).
    @method(HTTPMethod.OPTIONS) \
    @path("/send") \
    void optionsSend(scope HTTPServerResponse res)
        import std.conv

        enum oneDay = 24.hours.total!q{seconds}.to!string
        _emitBasicCORSHeaders()
        header("Access-Control-Allow-Methods", "OPTIONS, POST")
        header("Access-Control-Max-Age", oneDay)
        res.writeVoidBody()//Otherwise, 404 is emitted.

    void postSend(scope HTTPServerRequest req) @system
        import duel_snapshot.parser: parseSnapshot = parse

        const snap = parseSnapshot(req)
        _storage.dropOldSessions(_expirationPeriod)
        final switch (_storage.submit(snap)) with (ss.SubmissionStatus)
            case updated: break
            case ignored: logDiagnostic("Ignoring duplicate %s", snap.id); break
            case created: logInfo("Streaming %s with %s", snap.id, snap.agent); break

        _emitBasicCORSHeaders()
        render!("send.dt", snap)

    void get() @system
        render!"index.dt"

    void getDuels()
        import su = site_utils

        redirect(su.prefix)

    @path("/duels/log") \
    void getDuelsLogRoot()
        getDuels()

    @path("/duels/log/:id") \
    void getDuelsLog(string _id) @system
        _storage.dropOldSessions(_expirationPeriod)
        if (auto session = _id in _storage)
            const log = &session.log
            const ago = session.sinceLastUpdated.total!q{seconds}
            render!("log.dt", log, ago)
        else
            //The sailing has apparently ended, and there is no way to know
            //if it was hosted on godville.net or on godvillegame.com.
            redirect("https://godville.net/duels/log/" ~ _id)

    @path("/duels/log/:id/ws") \
    void getWS(string _id, scope WebSocket socket) nothrow
        import std.algorithm.comparison
        import std.array

        import vibe.data.json

        import zlib = zlib: ZlibException

        auto app = appender!(char[ ])
        auto session = _id in _storage
        try
            scope(failure) socket.close(1011)//Internal Error
            auto response = Json.emptyObject
            do
                if (_id !in _storage || session.status == ss.Session.Status.finished)
                    const host = session !is null ? session.log.host : "https://godville.net"
                    app.clear()
                    app.writeJsonString(Json(["redirect": Json(host ~ "/duels/log/" ~ _id)]))
                    socket.send((() @trusted => zlib.compress(app.data, 0))())
                    return

                auto log = &session.log
                const ago = session.sinceLastUpdated.total!q{seconds}
                if (session.status == ss.Session.Status.outOfMemory)
                    logInfo("Out of memory; dropping %s at step %d", log.id, log.step)
                    //We have to delete this log now, but we hope it will be resubmitted later.
                    app.clear()
                    app.writeJsonString(Json([
                        "stayHere":   Json(true),
                        "retryAfter": Json(max(log.stepDuration - ago, 1)),
                        "retryEvery": Json(2),
                        "retryCount": Json(5),
                    ]))
                    socket.send((() @trusted => zlib.compress(app.data, 0))())
                    socket.close(1013)//Try Again Later
                    return

                response["step"] = log.step
                response["ago"] = ago
                response["stepDuration"] = log.stepDuration
                response["allies"] = log.allies
                response["map"] = log.map
                response["chronicle"] = log.chronicle
                response["clientData"] = log.clientData

                app.clear()
                app.writeJsonString(response)
                const compressed = (() @trusted => zlib.compress(app.data))()
                logDiagnostic(
                    "Compressed %.1f KB -> %.1f KB (%.1fx)",
                    app.data.length * (1. / 1024),
                    compressed.length * (1. / 1024),
                    float(app.data.length) / compressed.length)

                socket.send(compressed)
                session.event.wait()
            while (socket.connected)
        catch (ZlibException e)
            logError("Zlib compression error: %s", e.msg)
        catch (Exception e)
            logError("Unexpected exception during WebSocket handling: %s", e.msg)
