import std.range

import vibe.vibe

import su = site_utils


@safe:

private /+immutable+/ string[2] _addresses = ["::1", "127.0.0.1"]
private ushort _port = 8000
private size_t _maxMemory


private void _parseArguments() @system
    import std.algorithm.mutation
    import std.conv

    import size_parser

    string maxMemory = "128M"

    readOption("p|port", &_port, "Port to listen to (default: 8000).")
    readOption("prefix", &su.prefix, "Prefix for site's root URL (default: /).")
    readOption("max-memory", &maxMemory, "Limit for temporary log storage (default: 128M).")

    if (!su.prefix.empty && su.prefix[0] != '/')
        throw new Exception("prefix must start with a '/'")
    su.prefix = su.prefix.stripRight('/')

    _maxMemory = parseSize(maxMemory).to!size_t
    if (!_maxMemory)
        throw new Exception("zero memory limit")


private void _configure()
    import site

    setLogFormat(FileLogger.Format.threadTime, FileLogger.Format.threadTime)

    auto settings = new HTTPServerSettings
    settings.bindAddresses = _addresses[ ]
    settings.port = _port

    auto fsettings = new HTTPFileServerSettings
    fsettings.serverPathPrefix = su.prefix

    auto router = (
        new URLRouter(su.prefix)
        .registerWebInterface(new Site(_maxMemory))
        .get("/static/*",    serveStaticFiles(".", fsettings))
        .get("/api.json",    serveStaticFile("static/api.json"))
        .get("/version",     serveStaticFile("static/version.txt"))
        .get("/favicon.ico", serveStaticFile("static/favicon.ico"))
        .get("/robots.txt",  serveStaticFile("static/robots.txt"))
    )
    if (!su.prefix.empty)
        //TODO: Find a way to handle the root page without a trailing slash.
        router = (
            (new URLRouter)
            //For now, just return 307 Temporary Redirect.
            .any(su.prefix, staticRedirect(su.prefix ~ '/', HTTPStatus.temporaryRedirect))
            .any("*", router)
        )
    listenHTTP(settings, router)


int main() @system
    import std.encoding

    version (DigitalMars)
        import etc.linux.memoryerror

        static if (is(typeof(&registerMemoryErrorHandler)))
            registerMemoryErrorHandler()

    try
        _parseArguments()
        if (!finalizeCommandLineOptions())
            return 0//--help requested.
    catch (Throwable th)
        logFatal("Error processing command line: %s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 2

    try
        _configure()
    catch (Throwable th)
        logFatal("Configuration error: %s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 4

    try
        lowerPrivileges()
        return runEventLoop()
    catch (Throwable th)
        logFatal("%s", th.msg)
        logDiagnostic("%s", th.toString().sanitize())
        return 1
