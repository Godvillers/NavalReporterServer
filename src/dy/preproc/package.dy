import std.algorithm
import std.conv
import std.range
import std.regex
import std.string
import std.uni

import html
import vibe.core.log

import duel_log
import duel_snapshot.model
import du = preproc.dom_utils: _s, _text
import u  = preproc.utils: containsWord, _rx, _stableApp


@safe:

void applySnapshot(ref DuelLog log, ref const DuelSnapshot snap) @trusted
    import std.datetime

    const start = Clock.currTime()
    scope(success)
        const end = Clock.currTime()
        logDiagnostic("Processed %s in %s", snap.id, end - start)

    _Preprocessor p = { /+&log,+/ &snap, };
    log.host = snap.host
    log.id = snap.id
    log.step = snap.step
    log.stepDuration = snap.stepDuration
    log.allies = p.process!`Allies`(snap.allies)
    log.map = p.process!`Map`(snap.map)
    log.chronicle = p.process!`Chronicle`(snap.chronicle)
    log.clientData = snap.clientData


private:

struct _Preprocessor
    @system:

    //DuelLog* log//Unused for now.
    const(DuelSnapshot)* snap
    u.Player[4] players
    float scale = 1

    string process(string func)(string html)
        import std.utf

        try
            auto doc = createDocument(html)
            _stableApp.clear()
            try
                mixin(`process` ~ func ~ `(doc);`)
            finally
                du.destroyQueued()
            u._app.clear()
            doc.root.innerHTML(u._app)
            return u._app.data.idup
        catch (UTFException)
            logDiagnostic(`UTF error while processing "` ~ func ~ `"`)
            return html

    void processAllies(Document doc)
        du.removeEverythingDangerous(doc)
        foreach (line; doc.querySelectorAll(_s!".oppl"))
            //Remove a personal message (friend) link.
            doc.querySelectorAll(_s!".pm_link", line).each!(du.queueDestroy)

            //Remove custom styles (including eGUI+'s blacklist styling) and a blacklist tooltip.
            foreach (node; line.descendants.filter!q{a.isElementNode})
                node.removeAttr("style")
                node.removeAttr("title")
                node.removeAttr("data-etitle")
                node.removeAttr("data-ecss")

            if (const heroNode = doc.querySelector(_s!".opp_n", line))
                //Extract player index and hero's name.
                const info = u.extractHeroIndexAndName(_text(heroNode))
                const i = info.index
                if (i < 0)
                    //Can't know which player it is, no reason to go further.
                    continue
                players[i].heroName = info.heroName.idup

                //Extract HP.
                if (const hpNode = doc.querySelector(_s!".opp_h", line))
                    players[i].hp = u.extractHeroHp(_text(hpNode))

                if (auto godNode = doc.querySelector(_s!".opp_ng", line))
                    //Extract god's name.
                    players[i].godName = u.extractGodName(_text(godNode)).idup
                    //Remove guildmates' styling.
                    if (auto nameNode = doc.querySelector(_s!".opp_g", godNode))
                        nameNode.removeAttr("class")
                    //Remove eGUI+'s blacklist mark.
                    if (auto nameNode = doc.querySelector(_s!".ally_blacklisted", godNode))
                        nameNode.removeAttr("class")

                //Replace a drop-down button with a profile link.
                du.replaceDropDown(doc, line, snap.host, players[i].godName)

        //Remove control buttons from the header.
        if (auto header = du.findHeader(doc))
            du.removeControlButtons(header)

        //Remove eGUI+'s blacklist settings button.
        if (auto button = doc.querySelector(_s!"#e_ally_blacklist_setup"))
            button.destroy()

        //Remove extra whitespace between tags.
        du.removeExtraWhitespace(doc)

    void processChronicle(Document doc)
        import std.format

        du.removeEverythingDangerous(doc)

        foreach (node; doc.querySelectorAll(_s!".d_line"))
            //Remove custom styling, showing partially hidden text.
            node.removeAttr("style")
            //Assign streamer's color to white entries.
            if (!snap.streamerIndex.isNull)
                const classes = node.attr("class")
                if (!classes.splitter().canFind!(cls => cls.startsWith("saild_")))
                    const last = _stableApp.data.length
                    _stableApp ~= classes
                    _stableApp.formattedWrite!" saild_%s"(snap.streamerIndex.get + 1)
                    node.attr("class", _stableApp.data[last .. $])

        if (snap.timezone)
            //Convert time to UTC.
            foreach (timeNode; doc.querySelectorAll(_s!".d_time"))
                int minutes = 0
                try
                    foreach (part; _text(timeNode).splitter(':').take(2))
                        minutes = minutes * 60 + part.strip().to!int
                catch (ConvException)
                    continue
                minutes = ((minutes - snap.timezone) % (24 * 60) + 24 * 60) % (24 * 60)
                const last = _stableApp.data.length
                _stableApp.formattedWrite!"%02d:%02d"(minutes / 60, minutes % 60)
                timeNode.text = _stableApp.data[last .. $]

        if (auto header = du.findHeader(doc))
            //Remove control buttons from the header.
            du.removeControlButtons(header)
            //Reset header's width.
            foreach (node; header.children)
                node.removeAttr("style")

        //Remove progress bar's title.
        if (auto pbar = doc.querySelector(_s!".p_bar"))
            pbar.removeAttr("title")

        //Remove streaming links.
        if (auto block = doc.querySelector(_s!"#e_streaming"))
            block.destroy()

        //Remove extra whitespace between tags.
        du.removeExtraWhitespace(doc)

    void processMap(Document doc)
        import std.ascii: isDigit
        import std.math

        auto svgs = doc.elementsByTagName("svg")
        if (svgs.empty)
            return//Well, we could apply some transformations not affecting the SVG...
        Node svg = svgs.front

        float tileSize = snap.scale.get(1)
        if (snap.scale.isNull)
            //Extract tile size.
            if (const tile = doc.querySelector(_s!".tile polygon", svg))
                const(char)[ ][8] p
                if (!tile.attr("points")
                    .splitter!(c => c == ',' || c.isSpace)
                    .take(8)
                    .copy(p[ ])
                    .length
                )
                    try
                        //Take two opposite vertices.
                        const x0 = p[0].to!double
                        const y0 = p[1].to!double
                        const x1 = p[6].to!double
                        const y1 = p[7].to!double
                        //A tile size is defined as half the distance between them.
                        tileSize = cast(float)(hypot(x0 - x1, y0 - y1) * .5)
                    catch (ConvException) { }

        //Extract map scale.
        const svgStyle = svg.attr("style")
        if (auto c = svgStyle.matchFirst(_rx!r":\s*scale\s*\(\s*([\d.]+)\s*\)"))
            try
                scale = 1 / c[1].to!float
            catch (ConvException) { }
            svg.attr("style", c.pre ~ ":scale(1)" ~ c.post)

        //Rescale the SVG.
        const height = svg.attr("height")
        const tail = height.find!(c => !c.isDigit && c != '.')
        if (const newHeight = _rescale(height[0 .. $ - tail.length]))
            svg.attr("height", newHeight ~ tail)

        //Rescale the container.
        foreach (node; svg.ancestors)
            if (auto c = node.attr("style").matchFirst(_rx!r"\b(?<!-)height\s*:\s*([\d.]+)"))
                if (const newHeight = _rescale(c[1]))
                    node.attr("style", c.pre ~ "height:" ~ newHeight ~ c.post)

        //Temporarily detach the map to prevent from scanning through it.
        auto mapWrapper = svg.parent
        svg.detach()
        du.removeEverythingDangerous(doc)

        //Remove control buttons from the header.
        if (auto header = du.findHeader(doc))
            du.removeControlButtons(header)
            //Remove distance to the port and rim from the header.
            if (auto info = doc.querySelector(_s!".e_dist_info", header))
                info.destroy()

        //Remove a navigation response.
        if (auto node = doc.querySelector(_s!".dir_resp"))
            node.destroy()

        //Remove extra whitespace between tags.
        du.removeExtraWhitespace(doc)

        //Reattach the map.
        mapWrapper.appendChild(svg)

        Node prevTile, prevTitleNode
        float y, x
        const(u.Player)* player
        const(char)[ ][string] polygonCache
        foreach (node; svg.descendants)
            switch (node.tag)//`null` for non-elements.
                case "g":
                    auto classes = node.attr("class")
                    //Remove eGUI+'s simplified hints and ruler tooltips.
                    if (classes.splitter().canFind!(among!("epl", "e_ruler_tooltip")))
                        du.queueDestroy(node)
                        break

                    //Remove various player-specific classes.
                    classes = u.removePrivateTileClasses(classes)
                    node.attr("class", classes)

                    //Remember tiles' coordinates.
                    const pos = u.extractTileTranslation(node.attr("transform"))
                    if (pos.y.isNaN)
                        break
                    if (prevTile !is null)
                        du.updateTileTooltip(
                            doc, prevTile, y, x, tileSize, prevTitleNode, player, snap.cargo)
                        prevTitleNode = null
                    y = pos.y
                    x = pos.x
                    node.attr("transform", u.formatTileTranslation(y, x))
                    prevTile = node

                    //Parse ark number.
                    player = null
                    foreach (cls; classes.splitter())
                        if (cls.skipOver("pl"))
                            try
                                player = &players[(cls.to!int - 1) & 0x3]
                                break
                            catch (ConvException) { }
                    break

                case "polygon":
                    //Compress coordinates.
                    const points = node.attr("points")
                    if (const p = points in polygonCache)
                        node.attr("points", *p)
                    else
                        //TODO: Get rid of `idup`.
                        node.attr("points",
                            (polygonCache[points.idup] = u.compressTileCoordinates(points)))
                    break

                case "title":
                    if (prevTile !is null)
                        //There can be multiple <title>s inside a single <g>,
                        //but only the first one is relevant.
                        if (prevTitleNode is null)
                            prevTitleNode = node
                        else
                            du.queueDestroy(node)
                    break

                case "text":
                    const s = _text(node).strip()
                    if (s.empty)
                        //Remove empty <text> nodes.
                        du.queueDestroy(node)
                    else if (s == "@" && player !is null)
                        //Replace '@' with an ark number.
                        _stableApp ~= cast(char)(player - players.ptr + '1')
                        node.text = _stableApp.data[$ - 1 .. $]
                    break

                case "line":
                    //Remove eGUI+'s ruler and ark direction hint.
                    if (node.attr("id") == "e_ruler" ||
                        node.attr("class").containsWord("dir_arrow"))
                        du.queueDestroy(node)
                    break

                /+
                case "defs":
                    //TODO: Remove eGUI+'s SVG defs?
                    break
                +/

                default: break

        if (prevTile !is null)
            du.updateTileTooltip(doc, prevTile, y, x, tileSize, prevTitleNode, player, snap.cargo)

    private string _rescale(const(char)[ ] initialHeight) @safe
        try
            return text(initialHeight.to!float * scale)
        catch (ConvException)
            return null
