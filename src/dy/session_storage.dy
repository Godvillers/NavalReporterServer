import std.container.rbtree
import std.datetime

import vibe.core.sync

import duel_log
import duel_snapshot.model


@safe:

struct Session
    @safe:

    enum Status: ubyte
        active,
        finished,
        outOfMemory,

    SysTime lastUpdated
    LocalManualEvent event
    DuelLog log
    Status status

    @disable this(this)//LocalManualEvent is non-copyable.

    @property Duration sinceLastUpdated() const
        return Clock.currTime() - lastUpdated

    pragma(inline, true) \
    int opCmp()(auto ref const Session rhs) const nothrow pure /+@nogc+/
        import std.typecons

        //ID just for strict ordering in (rare) cases when timestamps match exactly.
        return tuple(lastUpdated, log.id).opCmp(tuple(rhs.lastUpdated, rhs.log.id))


enum SubmissionStatus: ubyte
    ignored,
    created,
    updated,


struct SessionStorage
    @safe:

    private
        Session[string] _aa
        RedBlackTree!(Session*, q{*a < *b}) _tree
        size_t _totalSpace, _maxMemory

    invariant
        assert(_tree is null || _aa.length == _tree.length)

    //@disable this()
    @disable this(this)

    this(size_t maxMemory) nothrow pure \
    in
        assert(maxMemory > 0)
    do
        _tree = new typeof(_tree)
        _maxMemory = maxMemory

    @property size_t length() const nothrow pure @nogc
        return _aa.length

    inout(Session)* opBinaryRight(string op: "in")(const(char)[ ] logId) inout nothrow pure @nogc
        return logId in _aa

    SubmissionStatus submit(ref const DuelSnapshot snap)
        import preproc

        if (auto session = snap.id in _aa)
            if (snap.step <= session.log.step)
                return SubmissionStatus.ignored

            _removeFromTree(session)
            _dropWhileOutOfMemory()
            session.log.applySnapshot(snap)
            session.lastUpdated = Clock.currTime()
            _insertIntoTree(session)

            session.event.emit()
            return SubmissionStatus.updated

        _dropWhileOutOfMemory()
        auto session = &(_aa[snap.id] = Session(Clock.currTime(), createManualEvent()))
        session.log.applySnapshot(snap)
        _insertIntoTree(session)
        return SubmissionStatus.created

    void dropOldSessions(Duration maxAge)
        if (!_tree.empty)
            const thresholdPoint = Clock.currTime() - maxAge
            //The tree is sorted in such a way that older entries go first.
            while (!_tree.empty && _tree.front.lastUpdated <= thresholdPoint)
                _dropOldest(Session.Status.finished)

    private:

    void _insertIntoTree(Session* session) nothrow pure \
    in
        assert(session !is null)
    do
        version (unittest)
            import std.exception

            const number = assumeWontThrow(_tree.insert(session))
        else
            const number = _tree.insert(session)
        assert(number == 1)
        _totalSpace += session.log.space

    void _removeFromTree(Session* session) nothrow pure \
    in
        assert(session !is null)
    do
        assert(_totalSpace >= session.log.space)
        _totalSpace -= session.log.space
        const number = _tree.removeKey(session)
        assert(number == 1)

    void _dropOldest(Session.Status status) \
    in
        assert(status != Session.Status.active)
    do
        auto session = _tree.front
        assert(session.status == Session.Status.active)
        session.status = status
        session.event.emit()
        assert(_totalSpace >= session.log.space)
        _totalSpace -= session.log.space
        _tree.removeFront()
        const existed = _aa.remove(session.log.id)
        assert(existed)

    void _dropWhileOutOfMemory()
        while (_totalSpace >= _maxMemory)
            _dropOldest(Session.Status.outOfMemory)
